import java.util.stream.Collectors

plugins {
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "org.jetbrains.kotlin.kapt" version "1.6.10"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

allprojects {
    group 'gg.scala.cgs'
    version "1.0.6"

    repositories {
        mavenCentral()

        maven {
            name "Scala"
            allowInsecureProtocol true
            url "http://repository.scala.gg/repository/maven-releases/"

            credentials {
                username property("scala.credentials.username") as String
                password property("scala.credentials.password") as String
            }
        }
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.kapt"

    dependencies {
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib"

        compileOnly "gg.scala.lemon:bukkit:1.1.1"
        compileOnly 'gg.scala.spigot:sspigot-server:1.0.6'

        compileOnly "gg.scala.flavor:flavor:0.1.3"
        compileOnly "net.evilblock.cubed:bukkit:1.3.4.1"

        compileOnly "gg.scala.store:spigot:0.1.0"
        compileOnly "gg.scala.store:shared:0.1.0"

        compileOnly 'gg.scala.cloudsync:spigot:1.0.1'

        compileOnly "me.lucko:helper:5.6.9.1"
        kapt "me.lucko:helper:5.6.9.1"
    }

    compileKotlin {
        kotlinOptions.javaParameters = true
        kotlinOptions.jvmTarget = "1.8"
    }

    shadowJar {
        archiveClassifier.set("")

        exclude "**/*.kotlin_metadata"
        exclude "**/*.kotlin_builtins"
        exclude "META-INF/"

        archiveFileName = "cgs-${project.name}.jar"
    }

    tasks.withType(GenerateMavenPom).all {
        doLast {
            final File file = new File(
                    "$buildDir/publications/shadow/pom-default.xml"
            )

            final BufferedReader br = new BufferedReader(
                    new FileReader(file)

            )
            final String lines = br.lines()
                    .map((line) -> {
                        if (line.contains("<dependencies/>")) "" else line
                    })
                    .collect(Collectors.joining("\n"))

            final BufferedWriter wr = new BufferedWriter(
                    new FileWriter(file, true)
            )

            final PrintWriter writer = new PrintWriter(file)
            writer.print("")
            writer.close()

            wr.write(lines)
            wr.close()
        }
    }

    publishing {
        publications {
            shadow(MavenPublication) { publication ->
                project.shadow.component(publication)
            }
        }

        repositories {
            maven {
                name "Scala"
                allowInsecureProtocol true
                url "http://repository.scala.gg/repository/maven-releases/"

                credentials {
                    username property("scala.credentials.username") as String
                    password property("scala.credentials.password") as String
                }
            }
        }
    }

    tasks.build.dependsOn(shadowJar, publishShadowPublicationToScalaRepository)
}
